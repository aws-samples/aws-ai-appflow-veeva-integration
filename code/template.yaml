# Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.

#   Licensed under the Apache License, Version 2.0 (the "License").
#   You may not use this file except in compliance with the License.
#   A copy of the License is located at

#       http://www.apache.org/licenses/LICENSE-2.0

#   or in the "license" file accompanying this file. This file is distributed
#   on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
#   express or implied. See the License for the specific language governing
#   permissions and limitations under the License.

AWSTemplateFormatVersion: 2010-09-09
Transform: AWS::Serverless-2016-10-31

Parameters:
  BucketName:
    Description: S3 Bucket name - MAKE SURE this is unique!
    Type: String

Resources:
  AVAIBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Ref BucketName
      NotificationConfiguration:
        LambdaConfigurations:
        - Event: 's3:ObjectCreated:*'
          Function: !GetAtt AVAIS3Listener.Arn
      BucketEncryption:
          ServerSideEncryptionConfiguration:
            - BucketKeyEnabled: true
              ServerSideEncryptionByDefault:
                SSEAlgorithm: 'aws:kms'
                KMSMasterKeyID: !Join [ ":", [ "arn:aws:kms", !Ref "AWS::Region", !Ref "AWS::AccountId", "alias/aws/s3"]]
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true

  AVAIBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref AVAIBucket
      PolicyDocument: 
        Version: 2012-10-17
        Statement:
          - Sid: AllowAppFlow
            Action: 
              - s3:PutObject
              - s3:AbortMultipartUpload
              - s3:ListMultipartUploadParts
              - s3:ListBucketMultipartUploads
              - s3:GetBucketAcl
              - s3:PutObjectAcl
            Effect: Allow
            Principal:
              Service:
                - appflow.amazonaws.com
            Resource:
              - !GetAtt AVAIBucket.Arn
              - !Join [ "/", [!GetAtt AVAIBucket.Arn, "*"]]
          - Sid: AllowSSLRequestsOnly
            Effect: Deny
            Principal: '*'
            Action: 's3:*'
            Resource:
              - !GetAtt AVAIBucket.Arn
              - !Join [ "/", [!GetAtt AVAIBucket.Arn, "*"]]
            Condition:
              Bool:
                'aws:SecureTransport': false

  BucketPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: 'lambda:InvokeFunction'
      FunctionName: !Ref AVAIS3Listener
      Principal: s3.amazonaws.com
      SourceAccount: !Ref "AWS::AccountId"
      SourceArn: !Sub "arn:aws:s3:::${BucketName}"

  AVAIS3ListenerRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal:
              Service:
                - lambda.amazonaws.com
            Action: "sts:AssumeRole"
      Path: "/"
      Policies:
        - PolicyName: "ReadWriteToS3"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: "Allow"
                Action:
                  - "S3:GetObject"
                  - "S3:DeleteObject"
                  - "S3:PutObject"
                Resource: !Sub "arn:aws:s3:::${BucketName}/*"
              - Effect: "Allow"
                Action:
                  - "S3:ListBucket"
                Resource: !Sub "arn:aws:s3:::${BucketName}"
        - PolicyName: "WritetoDDB"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: "Allow"
                Action:
                  - "dynamodb:BatchWriteItem"
                  - "dynamodb:PutItem"
                Resource: !GetAtt AVAIDDBTable.Arn
        - PolicyName: "AccessAIServices"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: "Allow"
                Action:
                  - "rekognition:Detect*"
                  - "comprehendmedical:DetectEntities"
                  - "textract:StartDocumentTextDetection"
                  - "textract:GetDocumentTextDetection"
                  - "transcribe:StartTranscriptionJob"
                  - "transcribe:GetTranscriptionJob"
                Resource: "*"
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole

  AVAIS3Listener:
    Type: AWS::Serverless::Function
    Properties:
      Handler: AVAIS3Listener.lambda_handler
      Description: "Lambda function to listen for S3 object operations"
      Runtime: python3.8
      Role: !GetAtt AVAIS3ListenerRole.Arn
      MemorySize: 1024
      Timeout: 300
      Layers:
        - !Ref AVAILambdaLayer
      CodeUri: source/
      Environment:
        Variables:
          DDB_TABLE: !Ref AVAIDDBTable
          BUCKETNAME: !Ref BucketName

  AVAILambdaLayer:
    Type: AWS::Serverless::LayerVersion
    Properties:
      LayerName: MyLayer
      Description: Layer description
      ContentUri: dependencies/
      CompatibleRuntimes:
        - python3.8
      LicenseInfo: "Available under the Apache 2.0 license."
      RetentionPolicy: Retain
    Metadata:
      BuildMethod: python3.8

  AVAIDDBTable:
    Type: AWS::DynamoDB::Table
    Properties:
      ProvisionedThroughput:
        ReadCapacityUnits: 10
        WriteCapacityUnits: 10
      AttributeDefinitions:
        - AttributeName: "ROWID"
          AttributeType: "S"
      KeySchema:
        - AttributeName: "ROWID"
          KeyType: "HASH"
      StreamSpecification:
        StreamViewType: NEW_IMAGE
      SSESpecification:
        SSEEnabled: true
